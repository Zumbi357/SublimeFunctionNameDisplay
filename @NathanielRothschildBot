@NathanielRothschildBot

#!/usr/bin/env python
import logging
from telegram import Update, ForceReply, InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, InlineQueryHandler
from PIL import Image, ImageDraw, ImageFont
from uuid import uuid4

# Bot credentials
BOT_TOKEN = "7742662304:AAETMXufcJNz21CCXVmt_N4HcfEBBjZbdT0"
BOT_USERNAME = "NathanielRothschildBot"
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    welcome_message = (
        f"🏥 Welcome to Nathaniel Rothschild! 🏥\n\n"
        f"Hello {user.mention_html()}!\n"
        "Send me any text to create stylized medical-themed images!\n\n"
        "Commands:\n"
        "/start - Start the bot\n"
        "/help - Show help message\n"
        "/about - About Nathaniel Rothschild\n\n"
        "You can also use me in any chat by typing:\n"
        f"@{BOT_USERNAME} your_text"
    )
    await update.message.reply_html(welcome_message, reply_markup=ForceReply(selective=True))

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        "🏥 Nathaniel Rothschild Commands:\n\n"
        "/start - Start the bot\n"
        "/help - Show this help message\n"
        "/about - About Ozempic 360\n\n"
        "Just send any text to get a stylized image!\n"
        f"Or use me in any chat with @{BOT_USERNAME}"
    )
    await update.message.reply_text(help_text)

async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    about_text = (
        "🏥 About Nathaniel Rothschild 🏥\n\n"
        "Your medical text styler!\n"
        "Create stylish medical-themed images from any text.\n\n"
        f"Bot: @{BOT_USERNAME}\n"
        "#Ozempic360 #Medical #TextArt"
    )
    await update.message.reply_text(about_text)

async def stylize(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_message = update.message.text
    if user_message is None:
        await update.message.reply_text("Please send text to stylize.")
        return

    try:
        img = Image.new('RGB', (500, 200), color=(240, 248, 255))
        d = ImageDraw.Draw(img)
        
        fnt = ImageFont.load_default()
        d.text((52, 92), user_message, font=fnt, fill=(0, 102, 204))
        d.text((48, 88), user_message, font=fnt, fill=(0, 102, 204))
        d.text((50, 90), user_message, font=fnt, fill=(0, 51, 153))

        d.rectangle([20, 20, 480, 180], outline=(41, 128, 185), width=2)
        d.line([20, 40, 480, 40], fill=(41, 128, 185), width=2)

        img.save('styled_text.png')
        with open('styled_text.png', 'rb') as photo:
            await update.message.reply_photo(photo=photo)
    except Exception as e:
        logger.error(f"Error processing image: {str(e)}")
        await update.message.reply_text("Sorry, there was an error processing your request.")

async def inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.inline_query.query
    if not query:
        return

    results = [
        InlineQueryResultArticle(
            id=str(uuid4()),
            title="Create Nathaniel Rothschild Style Text",
            input_message_content=InputTextMessageContent(
                f"Nathaniel Rothschild styled text: {query}"
            ),
            description=f"Click to send: {query}"
        )
    ]

    await update.inline_query.answer(results)

def main() -> None:
    try:
        application = Application.builder().token(BOT_TOKEN).build()

        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("about", about_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, stylize))
        application.add_handler(InlineQueryHandler(inline_query))

        print(f"Starting Nathaniel Rothschild (@{BOT_USERNAME})")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        logger.error(f"Bot startup error: {str(e)}")

if __name__ == "__main__":
    main()


